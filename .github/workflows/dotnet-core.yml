name: .NET Core

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main ]
env:
  nuget_folder: "\\packages"
  nuget_upload: "\\packages\\*.nupkg"
  solution: "AstronomyPictureOfTheDay.sln"
jobs:
  build:

    runs-on: 'windows-2022'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
    
    - name: Install Microsoft SBom tool
      run: dotnet tool install --global Microsoft.Sbom.DotNetTool

      
    - name: Install Nerdbank Git versioning
      run: dotnet tool install -g nbgv    
    - name: Install Nerdbank Git versioning
      run: nbgv cloud
    - name: Install dependencies
      run: msbuild ${{env.solution}} -t:restore
    - name: Build
      run: msbuild ${{env.caliburn_sln}} /t:Build /p:Configuration=Release
    - name: Test
      run: dotnet test --configuration Release -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --no-build --verbosity normal    
    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: AstronomyPictureOfTheDay.Xunit.Tests/TestResults/coverage.opencover.xml
        gist-filename: nasa-code-coverage.json
        gist-id: 870c49615ed7c8b1af25a0f5f0d8f7a4
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       
    - name: Print code coverage
      run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"
    - name: Print badge data
      run: echo "Badge data ${{steps.create_coverage_badge.outputs.badge}}"

       
    - name: pack Nuget Packages
      run: dotnet pack AstronomyPictureOfTheDay\AstronomyPictureOfTheDay.csproj --output ${{env.nuget_folder}} --configuration release 
      
    - name: publish Nuget Packages to GitHub
      run: dotnet nuget push ${{env.nuget_upload}} --source ${{vars.NUGET_FEED}} --api-key ${{secrets.NUGET_PACKAGE_UPLOAD}} --skip-duplicate
      if: github.event_name != 'pull_request'


    - name: Upload Packages Artifact
      uses: actions/upload-artifact@v4
      with:
        name: published_nuget
        path: ${{env.nuget_folder}}
